generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//  title, couponCode, expiryDate
model Coupon {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  couponCode String

  expiryDate DateTime
  isActive   Boolean

  user     User   @relation(fields: [vendorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  vendorId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Banner {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  link      String
  imageUrl  String
  isActive  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//RELATIONSHIPS COLLECTIONS

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String    @unique
  imageUrl    String?
  description String?
  isActive    Boolean
  products    Product[]
  blogs       Blogs[]
  marketIds   String[]  @db.ObjectId
  markets     Market[]  @relation(fields: [marketIds], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Market {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String     @unique
  logoUrl     String?
  description String?
  isActive    Boolean
  categoryIds String[]   @db.ObjectId
  categories  Category[] @relation(fields: [categoryIds], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Product {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  slug           String   @unique
  description    String?
  imageUrl       String?
  productImages  String[]
  isWholeSale    Boolean?
  isActive       Boolean
  sku            String?
  unit           String?
  barcode        String?
  productCode    String?
  productPrice   Float
  salePrice      Float
  wholeSalePrice Float?
  wholesaleQty   Int?
  productStock   Int?
  qty            Int?
  tags           String[]

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId String   @db.ObjectId

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @db.ObjectId

  orderItems OrderItem[]
  sales      Sale[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Blogs {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String  @unique
  imageUrl    String
  description String
  content     String
  isActive    Boolean

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String    @db.ObjectId
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}

//USER => ADMIN || FARMER || CUSTOMER || STAFF
enum UserRole {
  ADMIN
  SELLER
  MODERATOR
  USER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}

model User {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  email             String?  @unique
  password          String
  emailVerified     Boolean? @default(false)
  role              UserRole @default(USER)
  verificationToken String?
  plan              String?
  status            Boolean? @default(false)

  sellerProfile SellerProfile?
  userProfile   UserProfile?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product[] //user can have multiple products as a vendor
  coupons Coupon[]
  sales   Sale[] //user can have multiple sales as a vendor
  orders  Order[] //user can have multiple orders
}

model UserProfile {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId

  //Personal details
  name      String
  firstName String?
  lastName  String?
  email     String?
  username  String?
  phone     String?

  //shipping details
  streetAddress String?
  city          String?
  country       String?
  district      String?

  dateOfBirth  DateTime?
  profileImage String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SellerProfile {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  code            String?
  adress          String?
  phone           String?
  contactPerson   String?
  contactPhone    String?
  profileimageUrl String?
  firstName       String?
  lastName        String?
  mainProduct     String?
  businessName    String?
  notes           String?
  terms           String?
  isExperienced   Boolean?
  isActive        Boolean?
  products        String[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique @db.ObjectId

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Order {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  userId        String @db.ObjectId
  //personal details
  firstName     String
  lastName      String
  email         String
  phone         String
  //shipping details
  streetAddress String
  city          String
  country       String
  district      String
  shippingCost  Float

  orderNumber String?

  //payment information
  paymentMethod String
  //order items
  orderItems    OrderItem[]
  //status
  orderStatus   OrderStatus @default(PROCESSING) //set default as pending
  //relation
  user          User        @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Sale      Sale[]
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId
  productId String  @db.ObjectId
  quantity  Int
  price     Float
  vendorId  String  @db.ObjectId
  imageUrl  String?
  title     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //relations
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Sale {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId      String   @db.ObjectId
  productId    String   @db.ObjectId
  vendorId     String   @db.ObjectId
  total        Float
  productTitle String
  productImage String
  productPrice Float
  quantity     Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  order        Order    @relation(fields: [orderId], references: [id])
  product      Product  @relation(fields: [productId], references: [id])
  vendor       User     @relation(fields: [vendorId], references: [id])
}
