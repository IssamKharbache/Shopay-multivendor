generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//  title, couponCode, expiryDate
model Coupon {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  couponCode String
  expiryDate DateTime
  isActive   Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Banner {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  link      String
  imageUrl  String
  isActive  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//RELATIONSHIPS COLLECTIONS

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String    @unique
  imageUrl    String?
  description String?
  isActive    Boolean
  products    Product[]
  blogs       Blogs[]
  marketIds   String[]  @db.ObjectId
  markets     Market[]  @relation(fields: [marketIds], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Market {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String     @unique
  logoUrl     String?
  description String?
  isActive    Boolean
  categoryIds String[]   @db.ObjectId
  categories  Category[] @relation(fields: [categoryIds], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Product {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  slug           String   @unique
  description    String?
  imageUrl       String
  isWholeSale    Boolean?
  isActive       Boolean
  sku            String?
  unit           String?
  barcode        String?
  productCode    String?
  productPrice   Float
  salePrice      Float
  wholeSalePrice Float?
  wholesaleQty   Int?
  productStock   Int?
  qty            Int?
  tags           String[]

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId String   @db.ObjectId

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @db.ObjectId

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Blogs {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String  @unique
  imageUrl    String
  description String
  content     String
  isActive    Boolean

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String    @db.ObjectId
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}

//USER => ADMIN || FARMER || CUSTOMER || STAFF
enum UserRole {
  ADMIN
  FARMER
  MODERATOR
  USER
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name              String?
  email             String?  @unique
  password          String
  emailVerified     Boolean? @default(false)
  role              UserRole @default(USER)
  verificationToken String?

  farmerProfile FarmerProfile?
  profile       UserProfile?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Product Product[]
}

model UserProfile {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @unique @db.ObjectId
  //add other fields for user onboarding information
  dateOfBirth DateTime?
  adress      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FarmerProfile {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  farmerCode      String
  adress          String
  contactPerson   String?
  contactPhone    String?
  email           String
  profileimageUrl String?
  name            String
  notes           String?
  phone           String
  terms           String?
  isActive        Boolean
  landSize        Float
  products        String[]
  mainCrop        String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique @db.ObjectId

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}
